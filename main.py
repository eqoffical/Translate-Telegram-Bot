import config
import emoji
import random
import logging
import asyncio
import string
from aiogram import Bot, Dispatcher, executor, types
from PyDictionary import PyDictionary
from deep_translator import GoogleTranslator

cldr_emoji_name = list(emoji.EMOJI_DATA.keys()) 
logging.basicConfig(level=logging.INFO) # log
bot = Bot(token=config.TOKEN) # init aiogram
github_link = config.GITHUB_LINK
tg_link = config.TELEGRAM_LINK
dp = Dispatcher(bot)
dictionary = PyDictionary()
translator = GoogleTranslator(source='en', target='uk')
reverse_translator = GoogleTranslator(source='uk', target='en')

# /start command
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = message.from_user
    first_name = user.first_name

    text = f"–ü—Ä–∏–≤—ñ—Ç {first_name} üëã\n\n"
    text += "–Ø –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–Ω–∞–π—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ–≥–æ —Å–ª–æ–≤–∞!\n–î–æ —Ä–µ—á—ñ, –ø—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ "
    text += "<a href='{}'>–≥—Ä—É–ø–∏ </a>".format(tg_link)
    text += "—Ü—å–æ–≥–æ –±–æ—Ç–∞, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —ñ–¥–µ—é –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É!\n\n"
    text += "–ù–∞–ø–∏—à—ñ—Ç—å /help —è–∫—â–æ –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞\n\n"
    text += "üêû –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ —è–∫—ñ—Å—å –ø—Ä–æ–±–ª–µ–º–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º –ø—Ä–æ –Ω–∏—Ö"

    await message.answer(text, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)                        

# /help command
@dp.message_handler(commands=['help'])
async def cmd_start(message: types.Message):
    user = message.from_user
    first_name = user.first_name
    await message.reply("–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ–≥–æ —Å–ª–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É —á–∞—Ç.\n"
                        "–Ø–∫—â–æ —ó—Ö –¥–µ–∫—ñ–ª—å–∫–∞, —Ç–æ —Ä–µ—á–µ–Ω–Ω—è –±—É–¥–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ.\n\n"
                        "–¢–∞–∫–æ–∂, —è–∫—â–æ –≤–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–æ–≤–∞ –∞–±–æ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –π–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥, –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ –π–æ–≥–æ –±–µ–∑ –¥–µ—Ñ—ñ–∑—É –∞–±–æ —ñ–Ω—à–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫—ñ –º–æ–∂—É—Ç—å —Å–ø—Ä–∏—á–∏–Ω–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É, —ñ —è–∫—â–æ –≤–∏ –≤—Å–µ –æ–¥–Ω–æ –Ω–µ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ —Ü–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É üôè\n\n"
                        "/report - –¥–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É —Ü—å–æ–≥–æ –±–æ—Ç–∞ —Ç–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π GitHub\n"
                        "/help - –ø–æ–∫–∞–∑—É—î —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
                        "üêû –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –±—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ –Ω–∏—Ö —Ç–∞–∫–æ–∂")

# /report command
@dp.message_handler(commands=['report'])
async def cmd_start(message: types.Message):

    text = "–û—Ç–∂–µ, —â–æ–± –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤ –≥—Ä—É–ø—É –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ GitHub:\n\n"
    text += "<a href='{}'>üíå –ì—Ä—É–ø–∞</a>\n".format(tg_link)
    text += "<a href='{}'>üêû –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π GitHub</a>\n\n".format(github_link)
    text += "–©–∏—Ä–æ –¥—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!"

    await message.answer(text, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)

# chatting
@dp.message_handler()
async def cmd_chat(message: types.Message):
    
    text = message.text 
    
    total_words = 0
    word_limit = 256
    
    for word in text.split():
        total_words += 1

    await message.answer("Thinking. . .")
    user_word = message.text

    # language check
    UKRAINIAN_LETTERS = "–ê–ë–í–ì“ê–î–ï–Ñ–ñ–ó–ò–Ü–á–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–¨–Æ–Ø–∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è'-"
    ENGLISH_LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-"

    ukrainian_count = 0
    english_count = 0
    
    for character in text:
        if character in UKRAINIAN_LETTERS:
            ukrainian_count += 1
        if character in ENGLISH_LETTERS:  
            english_count += 1

    if ukrainian_count > 0:
        this_is_ukrainian_text = True
    else:
        this_is_ukrainian_text = False

    if english_count > 0:
        this_is_english_text = True  
    else:
        this_is_english_text = False

    # # Debug
    # await message.reply(f"En: {this_is_english_text}, Uk: {this_is_ukrainian_text}")

    # Dictionary answer
    if total_words == 1:

        try:

            if this_is_english_text == True and this_is_ukrainian_text == False:
                word = user_word

            elif this_is_english_text == False and this_is_ukrainian_text == True:
                
                translated = reverse_translator.translate(user_word)
                translated_words = translated.split(' ')
                word = max(translated_words, key=len)

            translation = translator.translate(word)
            meanings = dictionary.meaning(word)
            pick_emoji = random.choice(cldr_emoji_name)

            response = f"{emoji.emojize(pick_emoji)} –°–ª–æ–≤–æ: {word}\n\nüí¨ –ü–µ—Ä–µ–∫–ª–∞–¥: {translation}\n"

            for part_of_speech, definitions in meanings.items():
                response += f"\n{part_of_speech}:\n"
                for definition in definitions:
                    clean_def = definition.translate(str.maketrans('', '', '[]()'''))
                    translated_def = translator.translate(clean_def) 
                    response += f"‚Ä¢ {translated_def}\n"

            await message.reply(response)

        except: 

            pick_emoji = random.choice(cldr_emoji_name)
            translation = translator.translate(word)
            
            response = f"{emoji.emojize(pick_emoji)} –°–ª–æ–≤–æ: {word}\n\nüí¨ –ü–µ—Ä–µ–∫–ª–∞–¥: {translation}\n\n"
            apologies = f"üí° –í–∏–±–∞—á—Ç–µ, –∞–ª–µ —Ü—å–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ–º–∞—î —É —Å–ª–æ–≤–Ω–∏–∫—É\n–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–≤–µ—Å—Ç–∏ \"{user_word}\" —ñ–Ω—à–∏–º —Å–ø–æ—Å–æ–±–æ–º"
            
            await message.reply(response + apologies)

    # Translation 
    elif total_words > 1 and total_words < word_limit:

        if this_is_english_text == True and this_is_ukrainian_text == False:
            word = user_word
            post_text = ""

        elif this_is_english_text == False and this_is_ukrainian_text == True:
            word = reverse_translator.translate(user_word)
            post_text = ""

        elif this_is_english_text == True and this_is_ukrainian_text == True:
            word = reverse_translator.translate(user_word)
            post_text = "‚ö† –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É —Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ"
            
        pick_emoji = random.choice(cldr_emoji_name)
        translation = translator.translate(user_word)
        response = f"{emoji.emojize(pick_emoji)} –¢–µ–∫—Å—Ç: {word}\n\nüí¨ –ü–µ—Ä–µ–∫–ª–∞–¥: {translation}\n\n{post_text}"

        await message.reply(response)

    elif total_words > word_limit:

        response = f"üí° –í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É —Å–ª—ñ–≤, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å {word_limit}"
        await message.reply(response)

    else:
        await message.reply(f"‚ùå –¢—É—Ç –Ω–µ–º–∞—î —Å–ª–æ–≤–∞/—Å–ª—ñ–≤\n"
                            "–ù–∞–ø–∏—à–∏ /help —è–∫—â–æ —Ç–æ–±—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
